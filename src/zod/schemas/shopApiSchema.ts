import { z } from 'zod';

export const PagedResponseSchema = <TItem extends z.ZodTypeAny>(item: TItem) =>
  z.looseObject({
    total: z.number().int().nonnegative(),
    count: z.number().int().nonnegative(),
    offset: z.number().int().nonnegative(),
    limit: z.number().int().positive(),
    items: z.array(item),
  });

export const CategorySchema = z.looseObject({
  id: z.number().int(),
  name: z.string(),
  autogeneratedSlug: z.string(),
  parentId: z.number().int().optional(),
});

export const MediaImageSchema = z.looseObject({
  id: z.string(),
  isMain: z.boolean(),
  image160pxUrl: z.url(),
  image400pxUrl: z.url(),
  image800pxUrl: z.url(),
  image1500pxUrl: z.url(),
  imageOriginalUrl: z.url(),
});

export const ProductSchema = z.looseObject({
  id: z.number().int(),
  name: z.string(),
  price: z.number(),
  imageUrl: z.string().url(),
  inStock: z.boolean(),
});

export const ProductDetailsSchema = ProductSchema.extend({
  description: z.string(),
  media: z.object({
    images: z.array(MediaImageSchema),
  }),
});

export const GetProductsParamsSchema = z
  .looseObject({
    offset: z.number().int().nonnegative().optional(),
    limit: z.number().int().positive().optional(),
    keyword: z.string().min(1).optional(),
    category: z.number().int().optional(),
    sortBy: z.string().optional(),
    priceFrom: z.number().nonnegative().optional(),
    priceTo: z.number().nonnegative().optional(),
  })
  .refine((p) => p.priceFrom == null || p.priceTo == null || p.priceFrom <= p.priceTo, {
    message: 'priceFrom must be <= priceTo',
    path: ['priceFrom'],
  });
